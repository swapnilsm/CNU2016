package com.cnu2016.assignment2.app.scheduler;

import static org.junit.Assert.assertEquals;

import java.util.HashMap;

import com.cnu2016.assignment2.app.Starter;
import com.cnu2016.assignment2.app.State;
import com.cnu2016.assignment2.app.appliances.*;

import org.junit.Test;

/**
 * Performs happy test cases on the application logic, making sure
 * they work for usual testcases
 */
public class HappyTest {
    
    /**
     * Helper function to test the expected state of an application and 
     * the expected current time (with respect to actual state and actual
     * current time) 
     */
    public void stateCompare(Appliance appliance, State expectedState, 
        int expectedTime) {
        if(Scheduler.getInstance().executeNextEvent()) {
            // The new state of the appliance is found
            State newState = appliance.getState();
            // The current time is found
            int currentTime = Scheduler.getInstance().getCurrentTime();
            // Testing the new state and the current time
            assertEquals(expectedState, newState);
            assertEquals(expectedTime, currentTime);
        }
    }
    
    /**
     * Tests one happy test case which should work
     */
    @Test
    public void oneHappyTest() {
        HomeController homeController = HomeController.getInstance();
        HashMap<String, Appliance> applianceMap = homeController.getApplianceMap();
        Appliance airConditioner = applianceMap.get("AC");
        
        // Resetting the airConditioner
        airConditioner.setState(State.OFF);
        
        // Then we generate an event
        homeController.readEvent("AC,4,ON");
        
        // All events are executed
        Scheduler scheduler = Scheduler.getInstance();
        while(scheduler.executeNextEvent())
            homeController.displayStatus();
            
        stateCompare(airConditioner, State.ON, 4);
    }
    
    /**
     * Tests the file read to input events into the system
     * (only for a happy test case)
     */
    @Test
    public void fileHappyTestCase() {
        HomeController homeController = HomeController.getInstance();
        HashMap<String, Appliance> applianceMap = homeController.getApplianceMap();
        Appliance airConditioner = applianceMap.get("AC");
        
        // Resetting the airConditioner
        airConditioner.setState(State.OFF);
        
        // Then we start our application with our testfile
        // In this case, the testfile contains one entry: AC,4,ON
        // The application will run the singular event
        Starter starter = new Starter();
        starter.controller("/projects/Assignment02/testfile_single.txt");
        
        stateCompare(airConditioner, State.ON, 4);
    }
        
    /**
     * Tests the file read to input events into the system
     * (for multiple happy test cases, including a water heater
     *  automatic switch off)
     */
    @Test
    public void fileMultipleHappyTestCase() {
        HomeController homeController = HomeController.getInstance();
        HashMap<String, Appliance> applianceMap = homeController.getApplianceMap();
        Appliance airConditioner = applianceMap.get("AC");
        Appliance waterHeater = applianceMap.get("Heater");
        Appliance cookingOven = applianceMap.get("Oven");
        
        // Resetting the airConditioner
        airConditioner.setState(State.OFF);
        
        // Then we start our application with our testfile
        // In this case, the testfile contains one entry: AC,4,ON
        // The application will run the singular event
        Starter starter = new Starter();
        starter.fileReader("/projects/Assignment02/testfile.txt");
        
        // The testfile contains:
        //        AC,4,ON
        //        AC,8,OFF
        //        Oven,4,ON
        //        Heater,4,ON
        //        Heater,16,OFF
        //        Oven,4,OFF
         
        // AC, 4, ON
        stateCompare(airConditioner, State.ON, 4);
        
        // Oven, 4, ON
        stateCompare(cookingOven, State.ON, 4);
        
        // Heater, 4, ON
        stateCompare(waterHeater, State.ON, 4);
        
        // Oven, 4, OFF
        stateCompare(cookingOven, State.OFF, 4);
        
        // AC, 8, OFF
        stateCompare(airConditioner, State.OFF, 8);
        
        // This is an autogenerated event since the Heater switches off
        // After the set max time
        // Heater, 12, OFF
        stateCompare(waterHeater, State.OFF, 12);
        
        // After the set max time
        // Heater, 16, OFF
        stateCompare(waterHeater, State.OFF, 16);
        
    }


}
